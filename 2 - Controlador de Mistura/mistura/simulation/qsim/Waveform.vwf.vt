// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/25/2023 19:11:40"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          mistura
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mistura_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [6:0] C;
reg [6:0] D;
reg L;
reg M;
// wires                                               
wire A;
wire B;
wire E;
wire R;

// assign statements (if any)                          
mistura i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.D(D),
	.E(E),
	.L(L),
	.M(M),
	.R(R)
);
initial 
begin 
#16000000 $finish;
end 

// M
initial
begin
	M = 1'b0;
	M = #5120000 1'b1;
	M = #2400000 1'b0;
	M = #960000 1'b1;
	M = #1920000 1'b0;
	M = #3520000 1'b1;
end 

// L
initial
begin
	L = 1'b0;
	L = #3200000 1'b1;
	L = #4320000 1'b0;
	L = #4480000 1'b1;
end 
// C[ 6 ]
initial
begin
	C[6] = 1'b0;
end 
// C[ 5 ]
initial
begin
	C[5] = 1'b0;
	C[5] = #5600000 1'b1;
	C[5] = #1760000 1'b0;
	C[5] = #1280000 1'b1;
	C[5] = #2240000 1'b0;
	C[5] = #640000 1'b1;
	C[5] = #1440000 1'b0;
	C[5] = #1120000 1'b1;
end 
// C[ 4 ]
initial
begin
	C[4] = 1'b0;
	C[4] = #3040000 1'b1;
	C[4] = #1760000 1'b0;
	C[4] = #800000 1'b1;
	C[4] = #1760000 1'b0;
	C[4] = #1280000 1'b1;
	C[4] = #2240000 1'b0;
	C[4] = #640000 1'b1;
	C[4] = #1440000 1'b0;
	C[4] = #1120000 1'b1;
end 
// C[ 3 ]
initial
begin
	C[3] = 1'b0;
	C[3] = #3040000 1'b1;
	C[3] = #1760000 1'b0;
	C[3] = #800000 1'b1;
	C[3] = #1760000 1'b0;
	C[3] = #1280000 1'b1;
	C[3] = #2240000 1'b0;
	C[3] = #3200000 1'b1;
end 
// C[ 2 ]
initial
begin
	C[2] = 1'b0;
	C[2] = #3040000 1'b1;
	C[2] = #1760000 1'b0;
	C[2] = #800000 1'b1;
	C[2] = #1760000 1'b0;
	C[2] = #6720000 1'b1;
end 
// C[ 1 ]
initial
begin
	C[1] = 1'b0;
	C[1] = #3040000 1'b1;
	C[1] = #1760000 1'b0;
	C[1] = #800000 1'b1;
	C[1] = #1760000 1'b0;
	C[1] = #1280000 1'b1;
	C[1] = #2240000 1'b0;
	C[1] = #3200000 1'b1;
end 
// C[ 0 ]
initial
begin
	C[0] = 1'b0;
	C[0] = #3040000 1'b1;
	C[0] = #1760000 1'b0;
	C[0] = #800000 1'b1;
	C[0] = #1760000 1'b0;
	C[0] = #1280000 1'b1;
	C[0] = #2240000 1'b0;
end 
// D[ 6 ]
initial
begin
	D[6] = 1'b0;
end 
// D[ 5 ]
initial
begin
	D[5] = 1'b1;
	D[5] = #2080000 1'b0;
	D[5] = #960000 1'b1;
	D[5] = #1760000 1'b0;
	D[5] = #3840000 1'b1;
	D[5] = #2720000 1'b0;
	D[5] = #2720000 1'b1;
end 
// D[ 4 ]
initial
begin
	D[4] = 1'b1;
	D[4] = #2080000 1'b0;
	D[4] = #960000 1'b1;
	D[4] = #1760000 1'b0;
	D[4] = #800000 1'b1;
	D[4] = #1760000 1'b0;
	D[4] = #1280000 1'b1;
	D[4] = #2720000 1'b0;
	D[4] = #2720000 1'b1;
end 
// D[ 3 ]
initial
begin
	D[3] = 1'b1;
	D[3] = #2080000 1'b0;
	D[3] = #960000 1'b1;
	D[3] = #1760000 1'b0;
	D[3] = #800000 1'b1;
	D[3] = #1760000 1'b0;
	D[3] = #1280000 1'b1;
	D[3] = #2720000 1'b0;
	D[3] = #2720000 1'b1;
end 
// D[ 2 ]
initial
begin
	D[2] = 1'b1;
	D[2] = #2080000 1'b0;
	D[2] = #960000 1'b1;
	D[2] = #1760000 1'b0;
	D[2] = #800000 1'b1;
	D[2] = #1760000 1'b0;
	D[2] = #6720000 1'b1;
end 
// D[ 1 ]
initial
begin
	D[1] = 1'b0;
	D[1] = #3040000 1'b1;
	D[1] = #1760000 1'b0;
	D[1] = #800000 1'b1;
	D[1] = #1760000 1'b0;
	D[1] = #1280000 1'b1;
	D[1] = #2720000 1'b0;
	D[1] = #2720000 1'b1;
end 
// D[ 0 ]
initial
begin
	D[0] = 1'b0;
	D[0] = #3040000 1'b1;
	D[0] = #1760000 1'b0;
	D[0] = #800000 1'b1;
	D[0] = #1760000 1'b0;
	D[0] = #1280000 1'b1;
	D[0] = #2720000 1'b0;
end 
endmodule

