// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/10/2023 16:50:48"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          vagas
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module vagas_vlg_vec_tst();
// constants                                           
// general purpose registers
reg P;
reg [3:0] VD;
reg [3:0] VE;
// wires                                               
wire B;
wire L;
wire [1:0] V;

// assign statements (if any)                          
vagas i1 (
// port map - connection between master ports and signals/registers   
	.B(B),
	.L(L),
	.P(P),
	.V(V),
	.VD(VD),
	.VE(VE)
);
initial 
begin 
#32000000 $stop;
end 

// P
always
begin
	P = 1'b0;
	P = #16000000 1'b1;
	#16000000;
end 
// VD[ 3 ]
always
begin
	VD[3] = 1'b0;
	VD[3] = #2000000 1'b1;
	#2000000;
end 
// VD[ 2 ]
always
begin
	VD[2] = 1'b0;
	VD[2] = #4000000 1'b1;
	#4000000;
end 
// VD[ 1 ]
always
begin
	VD[1] = 1'b0;
	VD[1] = #8000000 1'b1;
	#8000000;
end 
// VD[ 0 ]
always
begin
	VD[0] = 1'b0;
	VD[0] = #8000000 1'b1;
	#8000000;
end 
// VE[ 3 ]
always
begin
	VE[3] = 1'b0;
	VE[3] = #8000000 1'b1;
	#8000000;
end 
// VE[ 2 ]
always
begin
	VE[2] = 1'b0;
	VE[2] = #8000000 1'b1;
	#8000000;
end 
// VE[ 1 ]
always
begin
	VE[1] = 1'b0;
	VE[1] = #4000000 1'b1;
	#4000000;
end 
// VE[ 0 ]
always
begin
	VE[0] = 1'b0;
	VE[0] = #2000000 1'b1;
	#2000000;
end 
endmodule

